@using FoodOrderingSystem.ViewModels
@model IEnumerable<UserRolesViewModel>

@{
    ViewData["Title"] = "Manage Users";
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin.css" asp-append-version="true" />
    <style>
        /* Fix modal backdrop issues */
        .modal-backdrop {
            display: none !important;
        }
        
        .modal {
            background: rgba(0, 0, 0, 0.5) !important;
        }
        
        .modal.show {
            display: flex !important;
            align-items: center;
            justify-content: center;
        }
        
        /* Ensure body doesn't get stuck */
        body.modal-open {
            overflow: auto !important;
            padding-right: 0 !important;
        }
        
        /* Custom modal styling */
        .modal-content {
            position: relative;
            z-index: 1060;
            max-width: 90vw;
            max-height: 90vh;
            overflow-y: auto;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
        }
        
        .modal-header {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            border-radius: 12px 12px 0 0;
            padding: 1.5rem;
        }
        
        .modal-title {
            font-weight: 600;
            font-size: 1.25rem;
        }
        
        .modal-body {
            padding: 2rem;
            background: #f8f9fa;
        }
        
        .modal-footer {
            padding: 1.5rem 2rem;
            background: white;
            border-radius: 0 0 12px 12px;
            border-top: 1px solid #dee2e6;
        }
        
        .form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.75rem;
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            border: 2px solid #e9ecef;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .alert {
            border-radius: 8px;
            border: none;
            padding: 1rem 1.25rem;
        }
        
        .btn {
            border-radius: 8px;
            padding: 0.75rem 1.5rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border: none;
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
            transform: translateY(-1px);
        }
        
        /* Role card styling */
        .form-check-card {
            margin-bottom: 1rem;
        }
        
        .form-check-card .form-check-input {
            position: absolute;
            opacity: 0;
        }
        
        .form-check-card .form-check-label {
            cursor: pointer;
            width: 100%;
        }
        
        .role-card {
            background: white;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            height: 100%;
        }
        
        .role-card:hover {
            border-color: #007bff;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,123,255,0.2);
        }
        
        .form-check-input:checked + .form-check-label .role-card {
            border-color: #007bff;
            background: #e7f3ff;
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,123,255,0.3);
        }
        
        .user-info-header {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            border: 1px solid #e9ecef;
        }
        
        .points-quick-actions .btn {
            font-size: 0.85rem;
            padding: 0.5rem 1rem;
        }
        
        /* Action buttons improvements */
        .action-btn {
            pointer-events: auto !important;
            z-index: 1 !important;
        }
    </style>
}

<div class="admin-users-header">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="admin-users-title">
                    <i class="fas fa-users me-3"></i>@ViewData["Title"]
                </h1>
                <p class="admin-users-subtitle">Manage user accounts, roles, and permissions</p>
            </div>
            <div class="col-md-4 text-end">
                <div class="admin-users-stats">
                    <div class="stat-item">
                        <div class="stat-number">@Model.Count()</div>
                        <div class="stat-label">Total Users</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.Count(u => u.Roles.Contains("Admin"))</div>
                        <div class="stat-label">Admins</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    @Html.AntiForgeryToken()
    <div class="admin-users-card">
        <div class="admin-users-card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-table me-2"></i>User Management
                </h5>
                <div class="admin-users-actions">
                    <button class="btn btn-outline-primary btn-sm" onclick="refreshUsers()">
                        <i class="fas fa-sync-alt me-1"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
        <div class="admin-users-card-body">
            <div class="table-responsive">
                <table class="table admin-users-table">
                <thead>
                    <tr>
                        <th class="user-column" style="width: 150px;">
                            <i class="fas fa-user me-1"></i>User
                        </th>
                        <th class="email-column" style="width: 180px;">
                            <i class="fas fa-envelope me-1"></i>Email
                        </th>
                        <th class="phone-column" style="width: 100px;">
                            <i class="fas fa-phone me-1"></i>Phone
                        </th>
                        <th class="points-column" style="width: 80px;">
                            <i class="fas fa-coins me-1"></i>Points
                        </th>
                        <th class="role-column" style="width: 80px;">
                            <i class="fas fa-user-tag me-1"></i>Role
                        </th>
                        <th class="status-column" style="width: 80px;">
                            <i class="fas fa-circle me-1"></i>Status
                        </th>
                        <th class="login-column" style="width: 100px;">
                            <i class="fas fa-sign-in-alt me-1"></i>Login
                        </th>
                        <th class="actions-column" style="width: 120px;">
                            <i class="fas fa-cogs me-1"></i>Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr class="admin-user-row @(user.IsBlocked ? "user-blocked" : "")">
                            <td class="user-cell">
                                <div class="user-info">
                                    <div class="user-avatar">
                                        <img src="@Url.Content(string.IsNullOrEmpty(user.ProfilePhotoUrl) ? "/images/default-profile.png" : user.ProfilePhotoUrl)"
                                             alt="@user.UserName"
                                             class="user-avatar-img"
                                             onerror="this.onerror=null;this.src='/images/default-profile.png';" />
                                    </div>
                                    <div class="user-details">
                                        <div class="user-name">@user.UserName</div>
                                    </div>
                                </div>
                            </td>
                            <td class="email-cell" title="@user.Email">
                                <span class="email-text">@user.Email</span>
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(user.PhoneNumber))
                                {
                                    @user.PhoneNumber
                                }
                                else
                                {
                                    <text>-</text>
                                }
                            </td>
                            <td class="points-cell">
                                <div class="points-badge">
                                    <i class="fas fa-coins"></i>
                                    <span class="points-value">@user.Points</span>
                                </div>
                            </td>
                            <td class="role-cell">
                                @if (user.Roles.Any())
                                {
                                    @foreach (var role in user.Roles)
                                    {
                                        <span class="role-badge @(role == "Admin" ? "role-admin" : "role-user")">
                                            <i class="fas @(role == "Admin" ? "fa-crown" : "fa-user") me-1"></i>@role
                                        </span>
                                    }
                                }
                                else
                                {
                                    <span class="role-badge role-none">
                                        <i class="fas fa-question-circle me-1"></i>No Role
                                    </span>
                                }
                            </td>
                            <td class="status-cell">
                                @if (user.IsBlocked)
                                {
                                    <div class="status-badge status-blocked">
                                        <i class="fas fa-ban"></i>
                                        <span>Blocked</span>
                                    </div>
                                    @if (user.BlockedUntil.HasValue)
                                    {
                                        <div class="status-details">
                                            <small>Until: @user.BlockedUntil.Value.ToString("MMM dd, HH:mm")</small>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(user.BlockReason))
                                    {
                                        <div class="status-details">
                                            <small>@user.BlockReason</small>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="status-badge status-active">
                                        <i class="fas fa-check-circle"></i>
                                        <span>Active</span>
                                    </div>
                                }
                            </td>
                            <td class="login-cell">
                                <div class="login-info">
                                    <div class="login-attempts">
                                        <i class="fas fa-exclamation-triangle @(user.LoginAttempts > 2 ? "text-warning" : "text-muted")"></i>
                                        <span>@user.LoginAttempts/5</span>
                                    </div>
                                    @if (user.LastLoginDate.HasValue)
                                    {
                                        <div class="login-time">
                                            <i class="fas fa-clock text-muted"></i>
                                            <span>@user.LastLoginDate.Value.ToString("MMM dd, HH:mm")</span>
                                        </div>
                                    }
                                </div>
                            </td>
                            <td class="actions-cell">
                                <div class="action-buttons">
                                    <button class="action-btn btn-edit" 
                                            onclick="editUser('@user.UserId', '@user.UserName', '@user.Email', '@user.PhoneNumber')"
                                            title="Edit User Information">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    
                                    <button class="action-btn btn-points" 
                                            onclick="editPoints('@user.UserId', '@user.UserName', @user.Points)"
                                            title="Manage Points">
                                        <i class="fas fa-coins"></i>
                                    </button>
                                    
                                    @if (!user.Roles.Contains("Admin"))
                                    {
                                        <button class="action-btn btn-roles" 
                                                onclick="manageRoles('@user.UserId', '@user.UserName')"
                                                title="Manage Roles">
                                            <i class="fas fa-user-tag"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="action-btn btn-admin" disabled 
                                                title="Admin roles cannot be changed">
                                            <i class="fas fa-crown"></i>
                                        </button>
                                    }
                                    
                                    <!-- Password change option removed for security reasons -->
                                    
                                    @if (!user.IsBlocked && !user.Roles.Contains("Admin"))
                                    {
                                        <button class="action-btn btn-block" 
                                                onclick="blockUser('@user.UserId', '@user.UserName')"
                                                title="Block User">
                                            <i class="fas fa-ban"></i>
                                        </button>
                                    }
                                    else if (user.IsBlocked)
                                    {
                                        <button class="action-btn btn-unblock" 
                                                onclick="unblockUser('@user.UserId', '@user.UserName')"
                                                title="Unblock User">
                                            <i class="fas fa-unlock"></i>
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Role Management Modal -->
<div class="modal fade" id="roleModal" tabindex="-1" aria-labelledby="roleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="roleModalLabel">Manage User Roles</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="roleForm" asp-action="UpdateUserRole" method="post">
                <div class="modal-body">
                    <input type="hidden" id="userId" name="userId" />
                    
                    <div class="user-info-header mb-4">
                        <div class="d-flex align-items-center">
                            <div class="user-icon me-3">
                                <i class="fas fa-user-tag fa-2x text-success"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Manage roles for user:</h6>
                                <strong id="userName" class="text-primary fs-5"></strong>
                            </div>
                        </div>
                    </div>
                    
                    <div class="roles-section">
                        <label class="form-label">
                            <i class="fas fa-users-cog me-2"></i>User Roles
                        </label>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check form-check-card">
                                    <input class="form-check-input" type="checkbox" id="userRole" name="role" value="User" checked>
                                    <label class="form-check-label" for="userRole">
                                        <div class="role-card">
                                            <i class="fas fa-user fa-2x text-primary mb-2"></i>
                                            <h6>Customer</h6>
                                            <small class="text-muted">Standard user access</small>
                                        </div>
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check form-check-card">
                                    <input class="form-check-input" type="checkbox" id="adminRole" name="role" value="Admin">
                                    <label class="form-check-label" for="adminRole">
                                        <div class="role-card">
                                            <i class="fas fa-crown fa-2x text-warning mb-2"></i>
                                            <h6>Administrator</h6>
                                            <small class="text-muted">Full system access</small>
                                        </div>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Role Information:</strong> Users can have multiple roles. Admin role grants full access to the admin panel.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Block User Modal -->
<div class="modal fade" id="blockModal" tabindex="-1" aria-labelledby="blockModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="blockModalLabel">Block User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="blockForm" asp-action="BlockUser" method="post">
                <div class="modal-body">
                    <input type="hidden" id="blockUserId" name="userId" />
                    
                    <div class="user-info-header mb-4">
                        <div class="d-flex align-items-center">
                            <div class="user-icon me-3">
                                <i class="fas fa-user-slash fa-2x text-danger"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Block user:</h6>
                                <strong id="blockUserName" class="text-danger fs-5"></strong>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="blockReason" class="form-label">
                                    <i class="fas fa-exclamation-triangle me-2"></i>Reason for blocking
                                </label>
                                <textarea class="form-control" id="blockReason" name="reason" rows="3" required 
                                          placeholder="Enter the reason for blocking this user..."></textarea>
                                <div class="form-text">This reason will be visible to the user</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="blockDuration" class="form-label">
                                    <i class="fas fa-clock me-2"></i>Block Duration
                                </label>
                                <select class="form-select" id="blockDuration" name="blockDurationHours">
                                    <option value="1">1 hour</option>
                                    <option value="6">6 hours</option>
                                    <option value="12">12 hours</option>
                                    <option value="24" selected>24 hours</option>
                                    <option value="48">48 hours</option>
                                    <option value="168">1 week</option>
                                    <option value="720">1 month</option>
                                </select>
                                <div class="form-text">How long to block the user</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This will immediately block the user's access to the system. They will not be able to log in until the block period expires.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Block User</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Password change modal removed for security reasons -->

<!-- Edit User Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit User Information</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editForm" asp-action="UpdateUserInfo" method="post">
                <div class="modal-body">
                    <input type="hidden" id="editUserId" name="userId" />
                    
                    <div class="user-info-header mb-4">
                        <div class="d-flex align-items-center">
                            <div class="user-icon me-3">
                                <i class="fas fa-user-edit fa-2x text-primary"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Edit information for user:</h6>
                                <strong id="editUserName" class="text-primary fs-5"></strong>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editEmail" class="form-label">
                                    <i class="fas fa-envelope me-2"></i>Email Address
                                </label>
                                <input type="email" class="form-control" id="editEmail" name="email" required 
                                       placeholder="Enter email address...">
                                <div class="form-text">User's primary email address</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editPhoneNumber" class="form-label">
                                    <i class="fas fa-phone me-2"></i>Phone Number
                                </label>
                                <input type="tel" class="form-control" id="editPhoneNumber" name="phoneNumber" 
                                       placeholder="Enter phone number...">
                                <div class="form-text">Phone number is optional</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Security Note:</strong> Username cannot be changed for security reasons. 
                        Only email and phone number can be updated.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-secondary">Update Information</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Points Modal -->
<div class="modal fade" id="pointsModal" tabindex="-1" aria-labelledby="pointsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pointsModalLabel">Edit User Points</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="pointsForm" asp-action="UpdateUserPoints" method="post">
                <div class="modal-body">
                    <input type="hidden" id="pointsUserId" name="userId" />
                    
                    <div class="user-info-header mb-4">
                        <div class="d-flex align-items-center">
                            <div class="user-icon me-3">
                                <i class="fas fa-coins fa-2x text-warning"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Manage points for user:</h6>
                                <strong id="pointsUserName" class="text-primary fs-5"></strong>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="pointsAmount" class="form-label">
                                    <i class="fas fa-coins me-2"></i>Points Amount
                                </label>
                                <input type="number" class="form-control" id="pointsAmount" name="points" required 
                                       min="0" placeholder="Enter points amount..." style="font-size: 1.1rem;">
                                <div class="form-text">Set the total number of points for this user</div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="points-quick-actions">
                                <label class="form-label">Quick Actions</label>
                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-outline-success btn-sm" onclick="addQuickPoints(100)">+100 Points</button>
                                    <button type="button" class="btn btn-outline-warning btn-sm" onclick="addQuickPoints(50)">+50 Points</button>
                                    <button type="button" class="btn btn-outline-info btn-sm" onclick="setQuickPoints(0)">Reset to 0</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Points Management:</strong> This will set the user's total points. You can either set a specific amount or use the quick action buttons to add points.
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-success">Update Points</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function manageRoles(userId, userName) {
            
            // Clear any existing backdrops first
            closeAllModals();
            
            setTimeout(() => {
                document.getElementById('userId').value = userId;
                document.getElementById('userName').textContent = userName;
                
                // Show the modal with custom backdrop handling
                const modal = document.getElementById('roleModal');
                modal.style.display = 'flex';
                modal.style.alignItems = 'center';
                modal.style.justifyContent = 'center';
                modal.classList.add('show');
                modal.setAttribute('aria-modal', 'true');
                modal.removeAttribute('aria-hidden');
            }, 100);
        }
        
        function blockUser(userId, userName) {
            
            // Clear any existing backdrops first
            closeAllModals();
            
            setTimeout(() => {
                document.getElementById('blockUserId').value = userId;
                document.getElementById('blockUserName').textContent = userName;
                
                // Show the modal with custom backdrop handling
                const modal = document.getElementById('blockModal');
                modal.style.display = 'flex';
                modal.style.alignItems = 'center';
                modal.style.justifyContent = 'center';
                modal.classList.add('show');
                modal.setAttribute('aria-modal', 'true');
                modal.removeAttribute('aria-hidden');
            }, 100);
        }
        
        // Password change function removed for security reasons
        
        function editUser(userId, userName, email, phoneNumber) {
            
            // Clear any existing backdrops first
            closeAllModals();
            
            setTimeout(() => {
                // Populate form fields
                document.getElementById('editUserId').value = userId;
                document.getElementById('editUserName').textContent = userName;
                document.getElementById('editEmail').value = email || '';
                document.getElementById('editPhoneNumber').value = phoneNumber || '';
                
                // Show the modal with custom backdrop handling
                const modal = document.getElementById('editModal');
                modal.style.display = 'flex';
                modal.style.alignItems = 'center';
                modal.style.justifyContent = 'center';
                modal.classList.add('show');
                modal.setAttribute('aria-modal', 'true');
                modal.removeAttribute('aria-hidden');
            }, 100);
        }
        
        function editPoints(userId, userName, currentPoints) {
            
            // Clear any existing backdrops first
            closeAllModals();
            
            setTimeout(() => {
                document.getElementById('pointsUserId').value = userId;
                document.getElementById('pointsUserName').textContent = userName;
                document.getElementById('pointsAmount').value = currentPoints;
                
                // Show the modal with custom backdrop handling
                const modal = document.getElementById('pointsModal');
                modal.style.display = 'flex';
                modal.style.alignItems = 'center';
                modal.style.justifyContent = 'center';
                modal.classList.add('show');
                modal.setAttribute('aria-modal', 'true');
                modal.removeAttribute('aria-hidden');
            }, 100);
        }
        
        function unblockUser(userId, userName) {
            if (confirm(`Are you sure you want to unblock ${userName}? This will immediately restore their access to the system.`)) {
                fetch('@Url.Action("UnblockUser", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId: userId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('User unblocked successfully!');
                        location.reload();
                    } else {
                        alert('Error unblocking user: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while unblocking the user.');
                });
            }
        }
        
        // Custom modal close function to prevent grey screen
        function closeAllModals() {
            console.log('Closing all modals with custom handler...');
            
            // Get all modals
            var modals = document.querySelectorAll('.modal');
            modals.forEach(function(modal) {
                // Try Bootstrap modal first
                var bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    try {
                        bsModal.hide();
                    } catch (e) {
                        console.log('Bootstrap modal hide failed, using custom method');
                    }
                }
                
                // Force hide with custom method
                modal.style.display = 'none';
                modal.classList.remove('show');
                modal.setAttribute('aria-hidden', 'true');
                modal.removeAttribute('aria-modal');
            });
            
            // Aggressive backdrop cleanup
            var backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(function(backdrop) {
                backdrop.remove();
            });
            
            // Clean up body completely
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';
            document.body.style.marginRight = '';
            document.body.style.position = '';
            
            // Remove any remaining overlay elements
            var overlays = document.querySelectorAll('[class*="backdrop"], [class*="overlay"]');
            overlays.forEach(function(overlay) {
                overlay.remove();
            });
            
            console.log('All modals closed with custom handler');
        }
        
        // Handle role form submission
        document.getElementById('roleForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            var formData = new FormData(this);
            var userId = formData.get('userId');
            var role = formData.get('role');
            var isInRole = document.getElementById(role === 'Admin' ? 'adminRole' : 'userRole').checked;
            
            fetch('@Url.Action("UpdateUserRole", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `userId=${userId}&role=${role}&isInRole=${isInRole}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeAllModals();
                    location.reload();
                } else {
                    alert('Error updating user role: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the user role.');
                closeAllModals();
            });
        });
        
        // Handle block form submission
        document.getElementById('blockForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            var formData = new FormData(this);
            var userId = formData.get('userId');
            var reason = formData.get('reason');
            var blockDurationHours = formData.get('blockDurationHours');
            
            fetch('@Url.Action("BlockUser", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `userId=${userId}&reason=${encodeURIComponent(reason)}&blockDurationHours=${blockDurationHours}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeAllModals();
                    location.reload();
                } else {
                    alert('Error blocking user: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while blocking the user.');
                closeAllModals();
            });
        });
        
        // Password form submission handler removed
        
        // Handle edit form submission
        document.getElementById('editForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            var formData = new FormData(this);
            var userId = formData.get('userId');
            var email = formData.get('email');
            var phoneNumber = formData.get('phoneNumber');
            
            // Client-side validation
            if (!email || email.trim() === '') {
                alert('Email address is required');
                return;
            }
            
            // Email format validation
            var emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
            if (!emailRegex.test(email)) {
                alert('Please enter a valid email address');
                return;
            }
            
            // Confirm the action
            if (!confirm('Are you sure you want to update this user\'s information?')) {
                return;
            }
            
            var token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!token) {
                alert('Security token not found. Please refresh the page and try again.');
                return;
            }
            
            fetch('@Url.Action("UpdateUserInfo", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token.value
                },
                body: `userId=${userId}&email=${encodeURIComponent(email)}&phoneNumber=${encodeURIComponent(phoneNumber || '')}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('User information updated successfully!');
                    closeAllModals();
                    location.reload();
                } else {
                    alert('Error updating user information: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the user information.');
                closeAllModals();
            });
        });
        
        // Enhanced modal cleanup event listeners
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Setting up modal cleanup handlers...');
            
            // Handle modal hidden events to clean up
            var modals = document.querySelectorAll('.modal');
            modals.forEach(function(modal) {
                modal.addEventListener('hidden.bs.modal', function() {
                    console.log('Modal hidden event triggered');
                    closeAllModals();
                });
                
                // Also handle when modal is shown to ensure proper setup
                modal.addEventListener('shown.bs.modal', function() {
                    console.log('Modal shown successfully');
                });
            });
            
            // Handle escape key to close modals
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    console.log('Escape key pressed - closing modals');
                    closeAllModals();
                }
            });
            
            // Handle clicks outside modal to close
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal') && !e.target.closest('.modal-content')) {
                    console.log('Clicked outside modal content - closing');
                    closeAllModals();
                }
            });
            
            // Add a global emergency cleanup function
            window.emergencyCloseModals = function() {
                console.log('Emergency modal cleanup triggered');
                
                // Remove all modal-related elements
                document.querySelectorAll('.modal, .modal-backdrop, [class*="backdrop"]').forEach(el => {
                    el.remove();
                });
                
                // Reset body completely
                document.body.className = document.body.className.replace(/modal-[^\s]*/g, '');
                document.body.style.cssText = '';
                
                console.log('Emergency cleanup completed');
            };
            
            // Add click handlers to all close buttons
            document.querySelectorAll('[data-bs-dismiss="modal"]').forEach(function(btn) {
                btn.addEventListener('click', function() {
                    console.log('Close button clicked');
                    closeAllModals();
                });
            });
            
            console.log('Modal cleanup handlers set up successfully');
        });
        
        // Quick points functions
        function addQuickPoints(amount) {
            const pointsInput = document.getElementById('pointsAmount');
            const currentPoints = parseInt(pointsInput.value) || 0;
            pointsInput.value = currentPoints + amount;
            
            // Add visual feedback
            pointsInput.style.background = '#d4edda';
            setTimeout(() => {
                pointsInput.style.background = '';
            }, 1000);
        }
        
        function setQuickPoints(amount) {
            const pointsInput = document.getElementById('pointsAmount');
            pointsInput.value = amount;
            
            // Add visual feedback
            pointsInput.style.background = amount === 0 ? '#f8d7da' : '#d4edda';
            setTimeout(() => {
                pointsInput.style.background = '';
            }, 1000);
        }
        
        // Refresh users function
        function refreshUsers() {
            const refreshBtn = document.querySelector('button[onclick="refreshUsers()"]');
            if (refreshBtn) {
                refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Refreshing...';
                refreshBtn.disabled = true;
            }
            
            // Simulate refresh delay
            setTimeout(() => {
                location.reload();
            }, 1000);
        }
    </script>
} 
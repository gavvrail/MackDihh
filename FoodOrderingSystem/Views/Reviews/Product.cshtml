@model FoodOrderingSystem.Controllers.ProductReviewsViewModel
@using FoodOrderingSystem.Models

@{
    ViewData["Title"] = $"Reviews for {Model.MenuItem.Name}";
}

@Html.AntiForgeryToken()

@section Styles {
    <link rel="stylesheet" href="~/css/reviews.css" asp-append-version="true" />
}

<div class="reviews-container">
    <div class="container">
        <!-- Product Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <img src="@Url.Content(Model.MenuItem.ImageUrl ?? "/images/placeholder.png")" 
                                     class="img-fluid rounded" 
                                     alt="@Model.MenuItem.Name"
                                     style="height: 150px; object-fit: cover;">
                            </div>
                            <div class="col-md-6">
                                <h2 class="mb-2">@Model.MenuItem.Name</h2>
                                <p class="text-muted mb-2">@Model.MenuItem.Category?.Name</p>
                                <p class="mb-3">@Model.MenuItem.Description</p>
                                
                                <!-- Rating Display -->
                                <div class="rating-display mb-3">
                                    <div class="d-flex align-items-center">
                                        <div class="stars me-2">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= Math.Round(Model.MenuItem.AverageRating))
                                                {
                                                    <i class="fas fa-star text-warning"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-star text-warning"></i>
                                                }
                                            }
                                        </div>
                                        <span class="rating-number fw-bold">@Model.MenuItem.AverageRating.ToString("F1")</span>
                                        <span class="text-muted ms-2">(@Model.MenuItem.TotalReviews review@(Model.MenuItem.TotalReviews != 1 ? "s" : ""))</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 text-end">
                                <h2 class="mb-3 fw-bold product-price-clean">RM@(Model.MenuItem.Price.ToString("F2"))</h2>
                                <a asp-controller="Menu" asp-action="Index" class="btn btn-outline-primary">
                                    <i class="fas fa-arrow-left me-1"></i>Back to Menu
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Reviews Section -->
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>Customer Reviews</h3>
                    <a asp-action="Create" asp-route-menuItemId="@Model.MenuItem.Id" class="btn btn-primary">
                        <i class="fas fa-pen me-1"></i>Write Review
                    </a>
                </div>

                @if (Model.Reviews.Any())
                {
                    <!-- Reviews List -->
                    <div class="reviews-list">
                        @foreach (var review in Model.Reviews)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-8">
                                            <div class="d-flex align-items-center mb-2">
                                                <div class="stars me-2">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        if (i <= review.Rating)
                                                        {
                                                            <i class="fas fa-star text-warning"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="far fa-star text-warning"></i>
                                                        }
                                                    }
                                                </div>
                                                <span class="fw-bold">@(review.IsAnonymous ? (review.AnonymousName ?? "Anonymous") : review.User?.UserName)</span>
                                                <span class="text-muted ms-2">@review.CreatedDate.ToString("MMM dd, yyyy")</span>
                                            </div>
                                            
                                            @if (!string.IsNullOrEmpty(review.Comment))
                                            {
                                                <p class="mb-3">@review.Comment</p>
                                            }

                                            <!-- Review Images -->
                                            @if (review.Images?.Any() == true)
                                            {
                                                <div class="review-images mb-3">
                                                    @foreach (var image in review.Images.Take(3))
                                                    {
                                                        <img src="@Url.Content(image.ImageUrl)" 
                                                             class="img-thumbnail me-2" 
                                                             alt="Review image"
                                                             style="width: 80px; height: 80px; object-fit: cover;">
                                                    }
                                                </div>
                                            }

                                            <!-- Business Response -->
                                            @if (review.Responses?.Any() == true)
                                            {
                                                <div class="business-response mt-3 p-3 bg-light rounded">
                                                    <div class="d-flex align-items-center mb-2">
                                                        <i class="fas fa-store me-2 text-primary"></i>
                                                        <strong>Business Response</strong>
                                                    </div>
                                                    @foreach (var response in review.Responses)
                                                    {
                                                        <p class="mb-1">@response.Response</p>
                                                        <small class="text-muted">@response.CreatedDate.ToString("MMM dd, yyyy")</small>
                                                    }
                                                </div>
                                            }
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <div class="review-actions">
                                                @if (!string.IsNullOrEmpty(Model.CurrentUserId) && review.UserId == Model.CurrentUserId)
                                                {
                                                    <!-- Delete button for review owner -->
                                                    <div class="d-flex justify-content-end mb-2">
                                                        <button class="btn btn-sm btn-outline-danger delete-review-btn" 
                                                                data-review-id="@review.Id"
                                                                title="Delete your review">
                                                            <i class="fas fa-trash me-1"></i>Delete Review
                                                        </button>
                                                    </div>
                                                }
                                                
                                                @if (!string.IsNullOrEmpty(Model.CurrentUserId) && review.UserId != Model.CurrentUserId)
                                                {
                                                    <!-- Voting buttons (only for other users' reviews) -->
                                                    <div class="helpful-section">
                                                        <div class="d-flex justify-content-end gap-2 mb-2">
                                                            @{
                                                                var userVote = Model.UserVotes.ContainsKey(review.Id) ? Model.UserVotes[review.Id] : null;
                                                                var helpfulActive = userVote == VoteType.Helpful;
                                                                var unhelpfulActive = userVote == VoteType.Unhelpful;
                                                            }
                                                            
                                                            <button class="btn btn-sm @(helpfulActive ? "btn-success" : "btn-outline-success") helpful-btn" 
                                                                    data-review-id="@review.Id"
                                                                    data-user-vote="@(userVote?.ToString()?.ToLower() ?? "none")">
                                                                <i class="fas fa-thumbs-up me-1"></i>Helpful (@review.HelpfulCount)
                                                            </button>
                                                            <button class="btn btn-sm @(unhelpfulActive ? "btn-danger" : "btn-outline-danger") unhelpful-btn" 
                                                                    data-review-id="@review.Id"
                                                                    data-user-vote="@(userVote?.ToString()?.ToLower() ?? "none")">
                                                                <i class="fas fa-thumbs-down me-1"></i>Unhelpful (@review.UnhelpfulCount)
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                                else if (string.IsNullOrEmpty(Model.CurrentUserId))
                                                {
                                                    <!-- Show vote counts for non-logged-in users -->
                                                    <div class="vote-display">
                                                        <div class="d-flex justify-content-end gap-2 mb-2">
                                                            <span class="text-muted">
                                                                <i class="fas fa-thumbs-up me-1"></i>@review.HelpfulCount helpful
                                                            </span>
                                                            <span class="text-muted">
                                                                <i class="fas fa-thumbs-down me-1"></i>@review.UnhelpfulCount unhelpful
                                                            </span>
                                                        </div>
                                                        <small class="text-muted">Login to vote</small>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <nav aria-label="Reviews pagination">
                            <ul class="pagination justify-content-center">
                                @if (Model.CurrentPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Product" asp-route-menuItemId="@Model.MenuItem.Id" asp-route-page="@(Model.CurrentPage - 1)">Previous</a>
                                    </li>
                                }

                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" asp-action="Product" asp-route-menuItemId="@Model.MenuItem.Id" asp-route-page="@i">@i</a>
                                    </li>
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <li class="page-item">
                                        <a class="page-link" asp-action="Product" asp-route-menuItemId="@Model.MenuItem.Id" asp-route-page="@(Model.CurrentPage + 1)">Next</a>
                                    </li>
                                }
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <!-- No Reviews -->
                    <div class="text-center py-5">
                        <i class="fas fa-comments fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No reviews yet</h4>
                        <p class="text-muted mb-4">Be the first to review this product!</p>
                        <a asp-action="Create" asp-route-menuItemId="@Model.MenuItem.Id" class="btn btn-primary">
                            <i class="fas fa-pen me-1"></i>Write the First Review
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Handle helpful/unhelpful buttons and delete buttons
        document.addEventListener('DOMContentLoaded', function() {
            const helpfulButtons = document.querySelectorAll('.helpful-btn');
            const unhelpfulButtons = document.querySelectorAll('.unhelpful-btn');
            const deleteButtons = document.querySelectorAll('.delete-review-btn');

            helpfulButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const reviewId = this.dataset.reviewId;
                    markHelpful(reviewId, this);
                });
            });

            unhelpfulButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const reviewId = this.dataset.reviewId;
                    markUnhelpful(reviewId, this);
                });
            });

            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const reviewId = this.dataset.reviewId;
                    deleteReview(reviewId, this);
                });
            });
        });

        function markHelpful(reviewId, button) {
            const originalText = button.innerHTML;
            const unhelpfulButton = button.parentElement.querySelector('.unhelpful-btn');
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
            button.disabled = true;

            fetch('/Reviews/MarkHelpful', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `reviewId=${reviewId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update helpful button
                    button.innerHTML = `<i class="fas fa-thumbs-up me-1"></i>Helpful (${data.helpfulCount})`;
                    
                    // Update unhelpful button
                    unhelpfulButton.innerHTML = `<i class="fas fa-thumbs-down me-1"></i>Unhelpful (${data.unhelpfulCount})`;
                    
                    // Update button states based on user vote
                    if (data.userVote === 'helpful') {
                        button.classList.remove('btn-outline-success');
                        button.classList.add('btn-success');
                        unhelpfulButton.classList.remove('btn-danger');
                        unhelpfulButton.classList.add('btn-outline-danger');
                    } else if (data.userVote === 'none') {
                        button.classList.remove('btn-success');
                        button.classList.add('btn-outline-success');
                        unhelpfulButton.classList.remove('btn-danger');
                        unhelpfulButton.classList.add('btn-outline-danger');
                    }
                } else {
                    button.innerHTML = originalText;
                    alert(data.message || 'An error occurred while voting.');
                }
                button.disabled = false;
            })
            .catch(error => {
                console.error('Error:', error);
                button.innerHTML = originalText;
                button.disabled = false;
                alert('An error occurred while voting. Please try again.');
            });
        }

        function markUnhelpful(reviewId, button) {
            const originalText = button.innerHTML;
            const helpfulButton = button.parentElement.querySelector('.helpful-btn');
            
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
            button.disabled = true;

            fetch('/Reviews/MarkUnhelpful', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `reviewId=${reviewId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update unhelpful button
                    button.innerHTML = `<i class="fas fa-thumbs-down me-1"></i>Unhelpful (${data.unhelpfulCount})`;
                    
                    // Update helpful button
                    helpfulButton.innerHTML = `<i class="fas fa-thumbs-up me-1"></i>Helpful (${data.helpfulCount})`;
                    
                    // Update button states based on user vote
                    if (data.userVote === 'unhelpful') {
                        button.classList.remove('btn-outline-danger');
                        button.classList.add('btn-danger');
                        helpfulButton.classList.remove('btn-success');
                        helpfulButton.classList.add('btn-outline-success');
                    } else if (data.userVote === 'none') {
                        button.classList.remove('btn-danger');
                        button.classList.add('btn-outline-danger');
                        helpfulButton.classList.remove('btn-success');
                        helpfulButton.classList.add('btn-outline-success');
                    }
                } else {
                    button.innerHTML = originalText;
                    alert(data.message || 'An error occurred while voting.');
                }
                button.disabled = false;
            })
            .catch(error => {
                console.error('Error:', error);
                button.innerHTML = originalText;
                button.disabled = false;
                alert('An error occurred while voting. Please try again.');
            });
        }

        function deleteReview(reviewId, button) {
            if (!confirm('Are you sure you want to delete your review? This action cannot be undone.')) {
                return;
            }

            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Deleting...';
            button.disabled = true;

            fetch('/Reviews/DeleteMyReview', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `reviewId=${reviewId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove the review card from the page
                    const reviewCard = button.closest('.card');
                    reviewCard.style.transition = 'opacity 0.3s ease';
                    reviewCard.style.opacity = '0';
                    
                    setTimeout(() => {
                        reviewCard.remove();
                        
                        // Check if there are no more reviews
                        const remainingReviews = document.querySelectorAll('.reviews-list .card');
                        if (remainingReviews.length === 0) {
                            location.reload(); // Reload to show "no reviews" message
                        }
                    }, 300);
                    
                    // Show success message
                    const successAlert = document.createElement('div');
                    successAlert.className = 'alert alert-success alert-dismissible fade show';
                    successAlert.innerHTML = `
                        <i class="fas fa-check-circle me-2"></i>Your review has been deleted successfully.
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    `;
                    document.querySelector('.container').insertBefore(successAlert, document.querySelector('.row'));
                    
                    // Auto-dismiss after 5 seconds
                    setTimeout(() => {
                        successAlert.remove();
                    }, 5000);
                } else {
                    button.innerHTML = originalText;
                    button.disabled = false;
                    alert(data.message || 'An error occurred while deleting your review.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                button.innerHTML = originalText;
                button.disabled = false;
                alert('An error occurred while deleting your review. Please try again.');
            });
        }
    </script>
}
